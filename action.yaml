name: 'Documentation Version Merger'
description: 'Checkout code and merge markdown files from a specific documentation tag'
author: 'OD-Oraf'

inputs:
  version:
    description: 'Documentation version to merge from (e.g., 1.0.0)'
    required: true
  target-branch:
    description: 'Target branch to merge markdown files into'
    required: false
    default: 'main'
  docs-path:
    description: 'Path to documentation files (relative to repository root)'
    required: false
    default: '.'

outputs:
  merged-files:
    description: 'List of markdown files that were merged'
    value: ${{ steps.merge-docs.outputs.merged-files }}
  commit-sha:
    description: 'SHA of the commit created (if any)'
    value: ${{ steps.merge-docs.outputs.commit-sha }}
  tag-used:
    description: 'Full tag name that was used for the merge'
    value: ${{ steps.construct-tag.outputs.full-tag }}

runs:
  using: 'composite'
  steps:
    - name: Construct full tag name
      shell: bash
      id: construct-tag
      run: |
        VERSION="${{ inputs.version }}"
        FULL_TAG="documentation-v${VERSION}"
        echo "full-tag=$FULL_TAG" >> $GITHUB_OUTPUT
        echo "✅ Constructed tag: $FULL_TAG"

    - name: Validate inputs
      shell: bash
      run: |
        VERSION="${{ inputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must follow semantic versioning pattern 'X.Y.Z' (e.g., 1.0.0)"
          echo "Provided: $VERSION"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ inputs.target-branch }}

    - name: Verify tag exists
      shell: bash
      run: |
        FULL_TAG="${{ steps.construct-tag.outputs.full-tag }}"
        if ! git tag -l | grep -q "^$FULL_TAG$"; then
          echo "Error: Tag '$FULL_TAG' does not exist"
          echo "Available documentation tags:"
          git tag -l "documentation-v*" | sort -V
          exit 1
        fi
        echo "✅ Tag '$FULL_TAG' exists"

    - name: Create temporary branch for tag checkout
      shell: bash
      run: |
        FULL_TAG="${{ steps.construct-tag.outputs.full-tag }}"
        TEMP_BRANCH="temp-docs-${{ inputs.version }}-$(date +%s)"
        echo "TEMP_BRANCH=$TEMP_BRANCH" >> $GITHUB_ENV
        git checkout -b "$TEMP_BRANCH" "$FULL_TAG"
        echo "✅ Created temporary branch: $TEMP_BRANCH"

    - name: Find markdown files in tag
      shell: bash
      id: find-files
      run: |
        cd "${{ inputs.docs-path }}"
        MARKDOWN_FILES=$(find . -name "*.md" -type f | sort)
        
        if [ -z "$MARKDOWN_FILES" ]; then
          echo "Warning: No markdown files found in path '${{ inputs.docs-path }}' for version ${{ inputs.version }}"
          echo "markdown-files=" >> $GITHUB_OUTPUT
        else
          echo "Found markdown files:"
          echo "$MARKDOWN_FILES"
          # Convert to space-separated list for output
          MARKDOWN_LIST=$(echo "$MARKDOWN_FILES" | tr '\n' ' ')
          echo "markdown-files=$MARKDOWN_LIST" >> $GITHUB_OUTPUT
        fi

    - name: Switch back to target branch
      shell: bash
      run: |
        git checkout "${{ inputs.target-branch }}"
        echo "✅ Switched back to ${{ inputs.target-branch }}"

    - name: Merge markdown files
      shell: bash
      id: merge-docs
      run: |
        if [ -z "${{ steps.find-files.outputs.markdown-files }}" ]; then
          echo "No markdown files to merge"
          echo "merged-files=" >> $GITHUB_OUTPUT
          echo "commit-sha=" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "action@github.com"

        # Create a list to track actually merged files
        MERGED_FILES=""
        CHANGES_MADE=false
        FULL_TAG="${{ steps.construct-tag.outputs.full-tag }}"

        echo "🔄 Starting merge process for $FULL_TAG into ${{ inputs.target-branch }}"
        
        # Process each markdown file
        for file in ${{ steps.find-files.outputs.markdown-files }}; do
          # Remove leading ./
          clean_file=${file#./}
          
          # Construct paths correctly
          if [ "${{ inputs.docs-path }}" = "." ]; then
            source_path="$clean_file"
            target_path="$clean_file"
          else
            source_path="${{ inputs.docs-path }}/$clean_file"
            target_path="${{ inputs.docs-path }}/$clean_file"
          fi
          
          echo "Processing: $clean_file (source: $source_path, target: $target_path)"
          
          # Check if file exists in tag
          if git show "$FULL_TAG:$source_path" > /dev/null 2>&1; then
            # Create directory if it doesn't exist
            mkdir -p "$(dirname "$target_path")"
            
            # Extract file from tag and save it to target location
            git show "$FULL_TAG:$source_path" > "$target_path"
            
            # Add the file to git (this will stage it regardless of changes)
            git add "$target_path"
            MERGED_FILES="$MERGED_FILES $clean_file"
            CHANGES_MADE=true
            echo "✅ Merged: $clean_file"
          else
            echo "⚠️  File not found in tag: $source_path"
          fi
        done

        # Check if there are actually staged changes
        if git diff --cached --quiet; then
          echo "ℹ️  No actual changes detected after file extraction"
          CHANGES_MADE=false
        fi

        if [ "$CHANGES_MADE" = true ]; then
          COMMIT_MSG="docs: merge markdown files from $FULL_TAG
          Merged files:$MERGED_FILES
          Source version: ${{ inputs.version }}
          Target branch: ${{ inputs.target-branch }}
          Documentation path: ${{ inputs.docs-path }}"
                    
                    git commit -m "$COMMIT_MSG"
                    COMMIT_SHA=$(git rev-parse HEAD)
          
          echo "✅ Created commit: $COMMIT_SHA"
          echo "merged-files=$MERGED_FILES" >> $GITHUB_OUTPUT
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        else
          echo "ℹ️  No changes to commit"
          echo "merged-files=" >> $GITHUB_OUTPUT
          echo "commit-sha=" >> $GITHUB_OUTPUT
        fi

    - name: Push changes
      shell: bash
      run: |
        if [ -z "${{ steps.merge-docs.outputs.commit-sha }}" ]; then
          echo "No changes to push"
          exit 0
        fi

        # Push directly to target branch
        git push origin "${{ inputs.target-branch }}"
        echo "✅ Pushed to ${{ inputs.target-branch }}"

    - name: Cleanup temporary branch
      shell: bash
      if: always()
      run: |
        if [ -n "$TEMP_BRANCH" ] && git branch | grep -q "$TEMP_BRANCH"; then
          git branch -D "$TEMP_BRANCH" || true
          echo "✅ Cleaned up temporary branch: $TEMP_BRANCH"
        fi

    - name: Summary
      shell: bash
      run: |
        echo "## 📋 Documentation Merge Summary"
        echo "- **Version**: ${{ inputs.version }}"
        echo "- **Full Tag**: ${{ steps.construct-tag.outputs.full-tag }}"
        echo "- **Target Branch**: ${{ inputs.target-branch }}"
        echo "- **Documentation Path**: ${{ inputs.docs-path }}"
        
        if [ -n "${{ steps.merge-docs.outputs.merged-files }}" ]; then
          echo "- **Merged Files**: ${{ steps.merge-docs.outputs.merged-files }}"
          echo "- **Commit SHA**: ${{ steps.merge-docs.outputs.commit-sha }}"
        else
          echo "- **Result**: No changes were made"
        fi
        
        echo "✅ Documentation merge completed successfully!"