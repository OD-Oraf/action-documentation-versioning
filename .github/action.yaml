name: 'Documentation Version Merger'
description: 'Checkout code and merge markdown files from a specific documentation tag'
author: 'OD-Oraf'

inputs:
  tag:
    description: 'Documentation tag to merge from (e.g., documentation-v1.0.0)'
    required: true
  target-branch:
    description: 'Target branch to merge markdown files into'
    required: false
    default: 'main'
  docs-path:
    description: 'Path to documentation files (relative to repository root)'
    required: false
    default: '.'

outputs:
  merged-files:
    description: 'List of markdown files that were merged'
    value: ${{ steps.merge-docs.outputs.merged-files }}
  commit-sha:
    description: 'SHA of the commit created (if any)'
    value: ${{ steps.merge-docs.outputs.commit-sha }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[ ! "${{ inputs.tag }}" =~ ^documentation-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Tag must follow pattern 'documentation-vX.Y.Z'"
          exit 1
        fi
        echo "✅ Tag format is valid: ${{ inputs.tag }}"

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ inputs.target-branch }}

    - name: Verify tag exists
      shell: bash
      run: |
        if ! git tag -l | grep -q "^${{ inputs.tag }}$"; then
          echo "Error: Tag '${{ inputs.tag }}' does not exist"
          echo "Available documentation tags:"
          git tag -l "documentation-v*" | sort -V
          exit 1
        fi
        echo "✅ Tag '${{ inputs.tag }}' exists"

    - name: Create temporary branch for tag checkout
      shell: bash
      run: |
        TEMP_BRANCH="temp-docs-${{ inputs.tag }}-$(date +%s)"
        echo "TEMP_BRANCH=$TEMP_BRANCH" >> $GITHUB_ENV
        git checkout -b "$TEMP_BRANCH" "${{ inputs.tag }}"
        echo "✅ Created temporary branch: $TEMP_BRANCH"

    - name: Find markdown files in tag
      shell: bash
      id: find-files
      run: |
        cd "${{ inputs.docs-path }}"
        MARKDOWN_FILES=$(find . -name "*.md" -type f | sort)
        
        if [ -z "$MARKDOWN_FILES" ]; then
          echo "Warning: No markdown files found in path '${{ inputs.docs-path }}' for tag '${{ inputs.tag }}'"
          echo "markdown-files=" >> $GITHUB_OUTPUT
        else
          echo "Found markdown files:"
          echo "$MARKDOWN_FILES"
          # Convert to space-separated list for output
          MARKDOWN_LIST=$(echo "$MARKDOWN_FILES" | tr '\n' ' ')
          echo "markdown-files=$MARKDOWN_LIST" >> $GITHUB_OUTPUT
        fi

    - name: Switch back to target branch
      shell: bash
      run: |
        git checkout "${{ inputs.target-branch }}"
        echo "✅ Switched back to ${{ inputs.target-branch }}"

    - name: Merge markdown files
      shell: bash
      id: merge-docs
      run: |
        if [ -z "${{ steps.find-files.outputs.markdown-files }}" ]; then
          echo "No markdown files to merge"
          echo "merged-files=" >> $GITHUB_OUTPUT
          echo "commit-sha=" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "Documentation Merger Action"

        # Create a list to track actually merged files
        MERGED_FILES=""
        CHANGES_MADE=false

        cd "${{ inputs.docs-path }}"
        
        for file in ${{ steps.find-files.outputs.markdown-files }}; do
          # Remove leading ./
          clean_file=${file#./}
          
          # Check if file exists in tag
          if git show "${{ inputs.tag }}:${{ inputs.docs-path }}/$clean_file" > /dev/null 2>&1; then
            # Create directory if it doesn't exist
            mkdir -p "$(dirname "$clean_file")"
            
            # Extract file from tag and save it
            git show "${{ inputs.tag }}:${{ inputs.docs-path }}/$clean_file" > "$clean_file"
            
            # Check if file actually changed
            if git diff --quiet "$clean_file" 2>/dev/null || ! git ls-files --error-unmatch "$clean_file" > /dev/null 2>&1; then
              git add "$clean_file"
              MERGED_FILES="$MERGED_FILES $clean_file"
              CHANGES_MADE=true
              echo "✅ Merged: $clean_file"
            else
              echo "ℹ️  No changes: $clean_file"
            fi
          else
            echo "⚠️  File not found in tag: $clean_file"
          fi
        done

        if [ "$CHANGES_MADE" = true ]; then
          COMMIT_MSG="docs: merge markdown files from ${{ inputs.tag }}

          Merged files:$MERGED_FILES
          
          Source tag: ${{ inputs.tag }}
          Target branch: ${{ inputs.target-branch }}"
          
          git commit -m "$COMMIT_MSG"
          COMMIT_SHA=$(git rev-parse HEAD)
          
          echo "✅ Created commit: $COMMIT_SHA"
          echo "merged-files=$MERGED_FILES" >> $GITHUB_OUTPUT
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        else
          echo "ℹ️  No changes to commit"
          echo "merged-files=" >> $GITHUB_OUTPUT
          echo "commit-sha=" >> $GITHUB_OUTPUT
        fi

    - name: Push changes
      shell: bash
      run: |
        if [ -z "${{ steps.merge-docs.outputs.commit-sha }}" ]; then
          echo "No changes to push"
          exit 0
        fi

        # Push directly to target branch
        git push origin "${{ inputs.target-branch }}"
        echo "✅ Pushed to ${{ inputs.target-branch }}"

    - name: Cleanup temporary branch
      shell: bash
      if: always()
      run: |
        if [ -n "$TEMP_BRANCH" ] && git branch | grep -q "$TEMP_BRANCH"; then
          git branch -D "$TEMP_BRANCH" || true
          echo "✅ Cleaned up temporary branch: $TEMP_BRANCH"
        fi

    - name: Summary
      shell: bash
      run: |
        echo "## 📋 Documentation Merge Summary"
        echo "- **Tag**: ${{ inputs.tag }}"
        echo "- **Target Branch**: ${{ inputs.target-branch }}"
        echo "- **Documentation Path**: ${{ inputs.docs-path }}"
        
        if [ -n "${{ steps.merge-docs.outputs.merged-files }}" ]; then
          echo "- **Merged Files**: ${{ steps.merge-docs.outputs.merged-files }}"
          echo "- **Commit SHA**: ${{ steps.merge-docs.outputs.commit-sha }}"
        else
          echo "- **Result**: No changes were made"
        fi
        
        echo "✅ Documentation merge completed successfully!"